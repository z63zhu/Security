#!/usr/bin/env python
#coding: utf-8
import base64
import httplib2
import sys
def oracle(check):
	http = httplib2.Http(".cache")
	cookie = base64.b64encode(str(check))
	header = {"Cookie":"user=" + cookie}
	response,content = http.request("http://localhost:4555","GET",headers= header)
	if (response.status == 200):
		return True
	else:
		return False

def decrypt(input):
	encrypted_message = input
	decrypted_message = []
	block_num = len(encrypted_message) / 16
	for b_num in range(0, block_num): #for each block
		y = encrypted_message[b_num*16 : b_num*16 + 16]
		r = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		for i in range(0, 256):
			r[15] = i;
			if oracle(bytearray(r) + bytearray(y)) == True:
				break;
		modified = 15
		for n in range(0, 14):
			r[n] ^= 1
			if oracle(bytearray(r) + bytearray(y)) == False:
				modified = n
 				a[n] = r[n] ^ 1
 				for k in range(n + 1, 16):
 					a[k] = r[k]
				break;
		if modified == 15:
			a[15] = r[15] ^ 1;
		for j in reversed(range(0, modified)):
			for acc in range(j + 1 ,16):
				r[acc] = a[acc]
			for i in range(0, 256):
				r[j] = i;
				if oracle(bytearray(r) + bytearray(y)) == True:
					a[j] = r[j] ^ 1
					break;
		decrypted_message.extend(a)
	return decrypted_message

def main():
	plaintext = sys.argv[1]
	plaintext = list(plaintext)
	padding = 16 - (len(plaintext) % 16)
	plaintext.append(1)
	for i in range(padding -1):
		plaintext.append(0)
	paded_text = list(bytearray(plaintext))
	# have add padding to plaintext 

	#1.Generate one random block (which can just be a bunch of 0's) of bytes. 
	cipher = []
	for i in range(len(paded_text)):
		cipher.append(0)
	cipher = list(bytearray(cipher))
	#2.loop n to 2
	#3.Use the padding oracle attack against Ci to obtain Dec(Ci)
	#4.Next calculate Pi⊕Dec(Ci). The result will be Ci−1
	#5.the decryption algorithm will calculate Dec(Ci)⊕Ci−1==Pi, which is actually the plaintext
	#6.Continue the loop doing the above, until you arrive at i==2
	n = len(paded_text)/16
	for i in reversed(range(1 , n)):
		Dec = decrypt(cipher)
		for k in range(i * 16 -16, i* 16):
			cipher[k] = (Dec[k + 16] ^ paded_text[k + 16])
	#7.For the last block (i==1) everything is the same, but the end result (C0) is actually the IV value.
	IV =[]
	Dec = decrypt(cipher)
	for i in range(16):
		IV.append(Dec[i] ^ paded_text[i])
	cipher = IV + cipher
	print base64.b64encode("".join(map(chr, cipher)))

main()




